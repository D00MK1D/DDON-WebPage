@page "/"
@using System.Text;
@using System.Text.Json;
@using System.Runtime.InteropServices;
@using System.Net.Sockets;

<PageTitle>Dragon's Dogma Online</PageTitle>

<h1>Hello, arisen!</h1>

Welcome to a new project!

<SurveyPrompt Title="How about slay some goblins?" />
<br />

<table>
    <tr>
        <td>Account:</td>
        <td>Password:</td>

    </tr>

    <tr>
        <td><input type="text" @bind-value="@account" /></td>
        <td><input type="password" @bind-value="@password" /></td>
    </tr>
    <tr>
        <td colspan="2"><hr /></td>
    </tr>
    <tr>
        <td>
            <button @onclick="Login">Login</button>
            <button @onclick="Register">Register</button>
        </td>
    </tr>
</table>

<hr />

<p>Server Response: @webToken</p>



@code {
    string account, password, webToken;

    public class ServerResponse
    {
        public string Error { get; set; }
        public string Message { get; set; }
        public string Token { get; set; }
    }

    public void Login()
    {
        if (account != null && password != null)
        {
            Operation("login");
        }
        else
        {

        }
    }

    public void Register()
    {
        if (account != null && password != null)
        {
            Operation("create");
        }
    }

    private async void Operation(string action)
    {

        var requestData = new
        {
            Action = action,
            Account = account,
            Password = password,
            Email = ""
        };

        var path = "/api/account";

        if ((action == "create" || action == "login"))
        {
            string jsonData = JsonSerializer.Serialize(requestData);

            string request = $"POST {path} HTTP/1.1\r\n";
            request += $"Host: 127.0.0.1:52100\r\n";
            request += "Content-Type: application/json\r\n";
            request += $"Content-Length: {jsonData.Length}\r\n";
            request += "Connection: close\r\n";
            request += "\r\n";
            request += jsonData;

            var utf8Encoding = new UTF8Encoding(false);

            try
            {
                using (TcpClient client = new TcpClient())
                {
                    client.ReceiveTimeout = 5000;
                    client.SendTimeout = 5000;

                    client.Connect("127.0.0.1", 52099);

                    using (NetworkStream stream = client.GetStream())
                    using (StreamWriter writer = new StreamWriter(stream, utf8Encoding))
                    using (StreamReader reader = new StreamReader(stream, utf8Encoding))

                    {
                        writer.Write(request);
                        writer.Flush();

                        StringBuilder sb = new StringBuilder();
                        string line;

                        stream.ReadTimeout = 5000;

                        while ((line = reader.ReadLine()) != null)
                        {
                            sb.AppendLine(line);
                        }

                        string response = sb.ToString();

                        var bodyStartIndex = response.IndexOf("\r\n\r\n") + 4;
                        var responseBody = response.Substring(bodyStartIndex);

                        ServerResponse sr = JsonSerializer.Deserialize<ServerResponse>(responseBody);

                        if (sr.Message == "Login Success")
                        {
                            webToken = sr.Token;
                        }
                        else if (sr.Error == null)
                        {
                            webToken = sr.Message;
                        }
                        else
                        {
                            webToken = sr.Error;
                        }
                    }
                }
            }
            catch
            {
                //--- This, for a while, will evade any error when server is not running
                //--- And/or you cant reach it by any chance
            }
        }
    }
}
