@using DDON_WebPage.Components.Data
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using System.Text.Json
@using System.Text
@inject NavigationManager Navigation
@inject AppDbContext Pgsql
@inject IHttpContextAccessor HttpContextAccessor
@inject CustomAuthenticationStateProvider AuthProvider
@inject ISnackbar Snackbar

@page "/Login"


<PageTitle>Dragon's Dogma Online</PageTitle>

<MudPaper Class="pa-6 mx-auto" Style="max-width:300px;">
    
    <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Login</MudText>

    <MudTextField @bind-Value="account" Label="Account ID" Variant="Variant.Outlined" />

    <MudTextField @bind-Value="password" 
                  Label="Password" 
                  Variant="Variant.Outlined" 
                  InputType="@PasswordInput" 
                  Adornment="Adornment.End" 
                  AdornmentIcon="@PasswordInputIcon" 
                  OnAdornmentClick="@ShowPassword" 
                  AdornmentAriaLabel="Show Password" />

    <br />
    <MudButton OnClick="LoginTask" 
               Disabled="_isLoginDisabled"
               FullWidth="true" 
               Color="Color.Primary" 
               Variant="Variant.Filled">
        @if (_loadingState)
        {
            <MudProgressCircular Color="Color.Primary" Rounded="true" Size="Size.Small" Indeterminate="true" />
        }
        else
        {
            <MudText Color="Color.Dark" Typo="Typo.button"><b>Login</b></MudText>
        }
    </MudButton>
    
    <br />
    <br />
    <a href="/ForgotPassword"> <MudText Align="Align.Center" Color="Color.Primary">Forgot My Password...</MudText> </a>

</MudPaper>
<br />

<p style="color:red">@errorMessage</p>

@code {

    private string account;
    private string password;
    private string? errorMessage;
    private bool _isLoginDisabled = false;
    private bool _loadingState = false;

    ServerApi.ServerResponse? serverResponse;

    private async Task LoginTask()
    {
        if ((account != "" && password != "") && (account != null && password != null))
        {
            _isLoginDisabled = true;
            _loadingState = true;

            try
            {
                var response = await ServerApi.Operation(Pgsql, "login", account, password, "", "", "");

                Account? user;

                if (response != null && !string.IsNullOrEmpty(response.Error))
                {
                    _loadingState = false;
                    _isLoginDisabled = false;
                    Console.WriteLine($"\n{DateTime.UtcNow} - Error: {response.Error} - Account: {account}\n");
                    Snackbar.Add("Invalid user or password.", Severity.Warning);
                    return;
                }
                else
                {
                    Console.WriteLine($"\n{DateTime.UtcNow} - Message: {response.Message} - Account: {account}\n");

                    if (response.Token != "" && response.Token != null)
                    {
                        user = await Pgsql.account.AsNoTracking().FirstOrDefaultAsync(u => u.NormalName == account.ToLower());

                        if (user == null)
                        {
                            Snackbar.Add("Invalid user or password.", Severity.Warning);
                            _loadingState = false;
                            _isLoginDisabled = false;
                            return;
                        }
                        AuthProvider.MarkUserAsAuthenticated(user.Name, user.Id);

                        if (user.State == 100)
                        {
                            _loadingState = false;
                            _isLoginDisabled = false;
                            Snackbar.Add($"Welcome {user.Name}!", Severity.Info);
                            Navigation.NavigateTo("/Admin");
                        }
                        else if (user.State == 1)
                        {
                            _loadingState = false;
                            _isLoginDisabled = false;
                            Snackbar.Add($"Welcome {user.Name}!", Severity.Info);
                            Navigation.NavigateTo("/Player");
                        }
                        else if (user.State == 0)
                        {
                            _loadingState = false;
                            _isLoginDisabled = false;
                            Snackbar.Add(new MarkupString($"Hello {user.Name}.<br/>Please, contact server admin."), Severity.Warning);
                        }
                    }
                    else
                    {
                        Snackbar.Add(response.Message, Severity.Warning);
                    }
                }
            }

            catch (Exception e)
            {
                Snackbar.Add($"Error: {e}", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Account and password cannot be empty.", Severity.Warning);

        }

    }

    bool isShow;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    InputType PasswordInput = InputType.Password;

    void ShowPassword()
    {
        if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }

    }

    private bool VerifyPassword(string Password, string storedPassword)
    {
        return Password == storedPassword;
    }
}