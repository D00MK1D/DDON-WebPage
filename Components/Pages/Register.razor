@using DDON_WebPage.Components.Data
@using System.Text.Json
@using System.Net
@using Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http
@using System.Text
@using System.ComponentModel.DataAnnotations
@using static DDON_WebPage.Components.Data.Models
@inject ISnackbar Snackbar
@inject AppDbContext Pgsql

@page "/Register"

<PageTitle>Dragon's Dogma Online</PageTitle>

<EditForm Model="registerModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <MudForm @ref="form" Model="registerModel" OnValidSubmit="HandleValidSubmit">

        <MudPaper Class="pa-6 mx-auto" Style="min-width:400px;">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Register</MudText>

            <MudTextField T="string" Variant="Variant.Outlined" Label="Account Name" Immediate="true"
                          @bind-Value="registerModel.Name"
                          TextChanged="OnContentChange"
                          For="@(() => registerModel.Name)" />

            <MudTextField T="string" Variant="Variant.Outlined" Label="Email" Immediate="true"
                          @bind-Value="registerModel.Email"
                          For="@(() => registerModel.Email)" 
                          TextChanged="OnContentChange" />

            <MudTextField T="string" Variant="Variant.Outlined" Label="Password" InputType="InputType.Password" Immediate="true"
                          @bind-Value="registerModel.Password"
                          For="@(() => registerModel.Password)" 
                          TextChanged="OnPasswordChange" />

            <MudTextField T="string" Variant="Variant.Outlined" Label="Confirm Password" InputType="InputType.Password" Immediate="true"
                          @bind-Value="registerModel.ConfirmPassword"
                          For="@(() => registerModel.ConfirmPassword)"
                          TextChanged="OnContentChange" />
            <br />
            <br />
            <MudButton Disabled="_isRegisterDisabled" 
                       OnClick="() => RegisterTask(registerModel.Name, registerModel.ConfirmPassword, registerModel.Email)"
                       Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       FullWidth="true">

                @if (_loadingState)
                {
                    <MudProgressCircular Color="Color.Primary" Rounded="true" Size="Size.Small" Indeterminate="true" />
                }
                else
                {
                    <MudText Color="Color.Dark" Typo="Typo.button"><b>Register</b></MudText>
                }
            </MudButton>

        </MudPaper>
    </MudForm>
</EditForm>



@code{
    private MudForm? form;
    private RegisterModel registerModel = new();
    ServerResponse? serverResponse;
    private bool _isRegisterDisabled = false;
    private bool _loadingState = false;



    private class ServerResponse
    {
        public string? Message { get; set; }
        public string? Error { get; set; }
        public string? Token { get; set; }
    }


    private async Task HandleValidSubmit()
    {
        string account = registerModel.Name;
        string password = registerModel.Password;
        string email = registerModel.Email;
        //_isRegisterDisabled = true;
        _loadingState = true;

        if (account != "" && password != "" && email != "")
        {
            await RegisterTask(account, password, email);
            _isRegisterDisabled = false;
            _loadingState = false;
            return;
        }

        _loadingState = false;
        return;
    }

    private async Task OnContentChange()
    {
        if (registerModel.ConfirmPassword != "" || registerModel.ConfirmPassword != null)
        {
            await form.Validate();
            StateHasChanged();

            //_isRegisterDisabled = !form.IsValid;

            return;
        }

        //_isRegisterDisabled = true;
        return;
    }

    private async Task OnPasswordChange(string newValue)
    {
        registerModel.Password = newValue;
        registerModel.ConfirmPassword = string.Empty;
        if (registerModel.ConfirmPassword != "")
        {
            await form.Validate();
            StateHasChanged();
            //_isRegisterDisabled = !form.IsValid;

            return;
        }

        //_isRegisterDisabled = true;
        return;
    }

    private async Task RegisterTask(string _account, string _password, string _email)
    {
        if ((_account != "" && _password != "" && _email != "" && registerModel.ConfirmPassword != "") && (_account != null && _password != null && _email != null && registerModel.ConfirmPassword != null) && form.IsValid)
        {
            try
            {
                var response = await ServerApi.Operation(Pgsql, "create", _account, _password,"", _email, "");

                if (response != null && !string.IsNullOrEmpty(response.Error))
                {
                    Console.WriteLine($"\n{DateTime.UtcNow} - Error: {response.Error} - Account: {_account}\n");
                    Snackbar.Add("Error: " + response.Error, Severity.Error);
                }
                else
                {
                    Console.WriteLine($"\n{DateTime.UtcNow} - Message: {response.Message} - Account: {_account}\n");
                    Snackbar.Add("Account registered", Severity.Success);
                }
            }
            catch
            {
                Snackbar.Add("Something went wrong.\n Contact the administration", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Verify register inputs", Severity.Warning);
        }

    }
}
