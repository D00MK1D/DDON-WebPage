@using DDON_WebPage.Components.Data
@using System.Text.Json
@using System.Net
@using Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http
@using System.Text
@using System.ComponentModel.DataAnnotations

@page "/Register"

<PageTitle>Register</PageTitle>

<EditForm Model="registerModel" OnValidSubmit="HandleValidSubmit">

    <DataAnnotationsValidator />
    <ValidationSummary />

    <MudForm @ref="form" Model="registerModel" OnValidSubmit="HandleValidSubmit">

        <MudPaper Class="pa-6 mx-auto" Style="min-width:400px;">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Register</MudText>

            <MudTextField T="string" Label="Account Name" Immediate="true"
                          @bind-Value="registerModel.Name"
                          For="@(() => registerModel.Name)" />

            <MudTextField T="string" Label="Email" Immediate="true"
                          @bind-Value="registerModel.Email"
                          For="@(() => registerModel.Email)" />

            <MudTextField T="string" Label="Password" InputType="InputType.Password" Immediate="true"
                          @bind-Value="registerModel.Password"
                          For="@(() => registerModel.Password)" />

            <MudTextField T="string" Label="Confirm Password" InputType="InputType.Password" Immediate="true"
                          @bind-Value="registerModel.ConfirmPassword"
                          For="@(() => registerModel.ConfirmPassword)" />

            <br />
            <br />


        </MudPaper>
    </MudForm>

</EditForm>
<MudButton OnClick="() => Reg(registerModel.Name, registerModel.Password, registerModel.Email)" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">
    Registrar
</MudButton>
@code{
    private MudForm form;
    private RegisterModel registerModel = new();

    ServerResponse? serverResponse;

    private class ServerResponse
    {
        public string Message { get; set; }
        public string Error { get; set; }
        public string Token { get; set; }
    }

    private async Task HandleValidSubmit()
    {

        string account = registerModel.Name;
        string password = registerModel.Password;
        string email = registerModel.Email;

        Reg(account, password, email);
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Account cannot be empty")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "E-mail cannot be empty")]
        [EmailAddress(ErrorMessage = "Invalid E-mail")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password cannot be empty")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Confirm password")]
        [Compare("Password", ErrorMessage = "Passwords don't match")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    public async void Reg(string Account, string Password, string Email)
    {
        string jsonData;

        using (HttpClient client = new HttpClient())
        {
            var path = "/api/account";
            var requestData = new
            {
                Action = "create",
                Account = Account,
                Password = Password,
                Email = Email
            };

            jsonData = JsonSerializer.Serialize(requestData);
            var content = new StringContent(jsonData, Encoding.UTF8, "application/json");
            client.DefaultRequestVersion = System.Net.HttpVersion.Version11; // Explicitly specify System.Net.HttpVersion
            HttpResponseMessage response = new HttpResponseMessage();

            try
            {
                response = await client.PostAsync("http://localhost:52099" + path, content);
            }
            catch (HttpRequestException e)
            {
                //snackbar? (i think yes....)
            }

            var responseBody = await response.Content.ReadAsStringAsync();

            try
            {
                serverResponse = JsonSerializer.Deserialize<ServerResponse>(responseBody);

            }
            catch (JsonException e)
            {
                //another one... maybe?
            }
        }
    }

}