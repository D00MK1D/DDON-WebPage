@using DDON_WebPage.Components.Data
@using System.Text.Json
@using System.Net
@using Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http
@using System.Text
@using System.ComponentModel.DataAnnotations
@using static DDON_WebPage.Components.Data.Models
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject AppDbContext Pgsql

@page "/Register"

<PageTitle>Dragon's Dogma Online</PageTitle>

<MudForm @ref="form" Model="registerModel" OnValidSubmit="HandleValidSubmit">

    <MudPaper Class="pa-6 mx-auto" Style="min-width:400px;">
        <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Register</MudText>

        <MudTextField T="string" Variant="Variant.Outlined" Label="Account ID" Immediate="false" MaxLength="50"
                      @bind-Value="registerModel.Name"
                      For="@(() => registerModel.Name)" />

        <MudTextField T="string" Variant="Variant.Outlined" Label="Email" Immediate="false" MaxLength="50"
                      @bind-Value="registerModel.Email"
                      For="@(() => registerModel.Email)" />

        <MudTextField T="string" Variant="Variant.Outlined" Label="Password" InputType="InputType.Password" Immediate="true" MaxLength="50"
                      @bind-Value="registerModel.Password"
                      For="@(() => registerModel.Password)" />

        <MudTextField T="string" Variant="Variant.Outlined" Label="Confirm Password" InputType="InputType.Password" Immediate="true" MaxLength="50"
                      @bind-Value="registerModel.ConfirmPassword"
                      For="@(() => registerModel.ConfirmPassword)" />
        <br />
        <br />
        <MudButton Disabled="_isLoadingState" 
                   OnClick="RegisterTask"
                   Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   FullWidth="true">

            @if (_isLoadingState)
            {
                <MudProgressCircular Color="Color.Primary" Rounded="true" Size="Size.Small" Indeterminate="true" />
            }
            else
            {
                <MudText Color="Color.Dark" Typo="Typo.button"><b>Register</b></MudText>
            }
        </MudButton>

    </MudPaper>
</MudForm>


@code{
    private MudForm? form;
    private RegisterModel registerModel = new();
    private bool _isRegisterDisabled { get; set; } = true;
    private bool _isLoadingState = false;

    private class ServerResponse
    {
        public string? Message { get; set; }
        public string? Error { get; set; }
        public string? Token { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        _IsNotLoading();
    }

    private async Task RegisterTask()
    {
        _IsLoading();

        if (!string.IsNullOrWhiteSpace(registerModel.Name) &&
            !string.IsNullOrWhiteSpace(registerModel.Password) &&
            !string.IsNullOrWhiteSpace(registerModel.Email) &&
            !string.IsNullOrWhiteSpace(registerModel.ConfirmPassword))
        {
            if (registerModel.Password == registerModel.ConfirmPassword)
            {
                try
                {
                    var response = await ServerApi.Operation(Pgsql, "create", registerModel.Name, registerModel.Password, "", registerModel.Email, "");

                    if (response != null && !string.IsNullOrEmpty(response.Error))
                    {
                        Console.WriteLine($"\n{DateTime.UtcNow} - Error: {response.Error} - Account: {registerModel.Name}\n");
                        Snackbar.Add("Error: " + response.Error, Severity.Error);
                        await _IsNotLoading();
                    }
                    else
                    {
                        Console.WriteLine($"\n{DateTime.UtcNow} - Message: {response.Message} - Account: {registerModel.Name}\n");
                        Snackbar.Add("Account registered", Severity.Success);
                        await _IsNotLoading();

                        NavigationManager.NavigateTo("/Login");
                    }
                }
                catch
                {
                    Snackbar.Add("Something went wrong.\n Contact the administration", Severity.Error);
                    await _IsNotLoading();
                }
            }
            else
            {
                Snackbar.Add("Passwords don't match", Severity.Warning);
                await _IsNotLoading();
            }
        }
        else
        {
            Snackbar.Add("Fields must not be empty", Severity.Warning);
            await _IsNotLoading();
        }
    }

    private async Task _IsLoading()
    {
        _isRegisterDisabled = true;
        _isLoadingState = true;
    }
    private async Task _IsNotLoading()
    {
        _isRegisterDisabled = false;
        _isLoadingState = false;
    }
}
