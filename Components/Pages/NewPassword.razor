@page "/NewPassword"
@using System.ComponentModel.DataAnnotations
@using DDON_WebPage.Components.Data
@using static DDON_WebPage.Components.Data.Models
@inject NavigationManager Navigation
@inject AppDbContext Pgsql

<PageTitle>Dragon's Dogma Online</PageTitle>

@if (tokenInvalido)
{
    <MudPaper Class="pa-6 mx-auto" Style="max-width:400px;">
        <MudText Typo="Typo.h6" Color="Color.Error">Link inválido ou expirado.</MudText>
    </MudPaper>
}
else
{
    <EditForm Model="newPasswordModel" OnValidSubmit="RecPassword">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <MudPaper Class="pa-6 mx-auto" Style="max-width:400px;">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Redefinir Senha</MudText>

            <MudTextField T="string" Label="Nova Senha" InputType="InputType.Password"
                          @bind-Value="newPasswordModel.Password" For="@(() => newPasswordModel.Password)" Immediate="true" />

            <MudTextField T="string" Label="Confirmar Nova Senha" InputType="InputType.Password"
                          @bind-Value="newPasswordModel.ConfirmPassword" For="@(() => newPasswordModel.ConfirmPassword)" Immediate="true" />

            <MudButton Type="Submit" OnClick=RecPassword Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">
                Salvar Nova Senha
            </MudButton>
        </MudPaper>
    </EditForm>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string Token { get; set; }

    private bool tokenInvalido = false;
    private NewPasswordModel newPasswordModel = new();
    private Account account;

    protected override async Task OnInitializedAsync()
    {
        var account = Pgsql.account.FirstOrDefault(u => u.EmailToken == Token && u.EmailVerifield == false);

        if (account == null)
        {
            tokenInvalido = true;
        }
    }

    private async Task RecPassword()
    {
        var account = Pgsql.account.FirstOrDefault(u => u.EmailToken == Token && u.EmailVerifield == false);

        account.Password = newPasswordModel.Password;
        account.EmailVerifield = true;

        await Pgsql.SaveChangesAsync();
        Navigation.NavigateTo("/login");
    }
}
