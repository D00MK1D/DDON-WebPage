@page "/NewPassword"
@using System.ComponentModel.DataAnnotations
@using DDON_WebPage.Components.Data
@using static DDON_WebPage.Components.Data.Models
@inject NavigationManager Navigation
@inject AppDbContext Pgsql
@inject ISnackbar Snackbar

<PageTitle>Dragon's Dogma Online</PageTitle>

@if (tokenInvalido)
{
    <MudPaper Class="pa-6 mx-auto" Style="max-width:400px;">
        <MudText Typo="Typo.h6" Color="Color.Error">Invalid link.</MudText>
    </MudPaper>
}
else
{
    <EditForm Model="newPasswordModel" OnValidSubmit="RecPassword">
        <DataAnnotationsValidator />

        <MudPaper Class="pa-6 mx-auto" Style="max-width:400px;">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Reset Password</MudText>

            <MudTextField T="string" 
                          Variant="Variant.Outlined" 
                          Label="New Password" 
                          InputType="InputType.Password"
                          @bind-Value="newPasswordModel.Password" 
                          For="@(() => newPasswordModel.Password)" 
                          Immediate="true" />

            <MudTextField T="string" 
                          Variant="Variant.Outlined" 
                          Label="Confirm New Password" 
                          InputType="InputType.Password"
                          @bind-Value="newPasswordModel.ConfirmPassword" 
                          For="@(() => newPasswordModel.ConfirmPassword)" 
                          Immediate="true" />
            
            <br />
            <MudButton Type="Submit" OnClick=RecPassword Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">
                Reset Password
            </MudButton>
        </MudPaper>
    </EditForm>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Token { get; set; }

    private bool tokenInvalido = false;
    private NewPasswordModel newPasswordModel = new();
    private Account? account;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            account = Pgsql.account.FirstOrDefault(u => u.EmailToken == Uri.UnescapeDataString(Token));
            if (account == null)
            {
                tokenInvalido = true;
            }
        }
        catch
        {
            tokenInvalido = true;
        }
    }

    private async Task RecPassword()
    {
        account = Pgsql.account.FirstOrDefault(u => u.EmailToken == Uri.UnescapeDataString(Token));

        if ((newPasswordModel.Password != null && newPasswordModel.Password != "") && (newPasswordModel.ConfirmPassword != null && newPasswordModel.ConfirmPassword != ""))
        {
            var response = await ServerApi.Operation(Pgsql, "reset", account.Name, newPasswordModel.Password, account.EmailToken);

            if (response != null && !string.IsNullOrEmpty(response.Error))
            {
                Console.WriteLine($"\n{DateTime.UtcNow} - Error: {response.Error} - Account: {account.Name}\n\n");
                Snackbar.Add("Erro: " + response.Error, Severity.Error);
            }
            else
            {
                Console.WriteLine($"\n{DateTime.UtcNow} - Message: {response.Message} - Account: {account.Name}\n\n");
                Snackbar.Add("Password changed", Severity.Success);
            }
        }
        else
        {
            Snackbar.Add("Something went wrong.\nContact the administration.", Severity.Success);
        }


    }
}
