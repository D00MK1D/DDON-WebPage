@inherits LayoutComponentBase

<MudThemeProvider Theme="@_theme" IsDarkMode="true" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<link href="css/site.css" rel="stylesheet" />
<style>
    body {
    }

        body::before {
            content: "";
            position: fixed;
            width: 100%;
            height: 100%;
            background-image: url(./img/backgrounds/background_04.png);
            background-size: cover;
            background-position: center;
            opacity: 0.3;
            z-index: -1;
            pointer-events: none;
        }
</style>

<MudLayout>

    <MudAppBar Elevation="3">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudIconButton Edge="Edge.Start"> <img style="width:96px" src="./img/Logos/Logo_Y1.png" /> </MudIconButton>
        <MudText Typo="Typo.h5" Class="ml-3">Dragon's Dogma Online</MudText>
        <MudSpacer />
        @*<MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" *@
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>

    <MudDrawer id="nav-drawer" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="3">
        <NavMenu />
    </MudDrawer>

    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _theme = new()
        {
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }


    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#b5b194",
        Surface = "#1e1e1e", //MudPaper color
        Background = "#2e2e2e", //Body Color
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "#1e1e1e", //Top Bar color
        DrawerBackground = "#1e1e1e", //Side Bar color
        ActionDefault = "#1e1e1e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d",
        TextPrimary = "#c3c3c3ff",
        TextSecondary = "#c3c3c3ff",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        LinesInputs = "#b5b194ff",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };
}


